#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "appsettings.h"
#include "manualassembler.h"
#include "manualrenderer.h"
#include "templateeditor.h"
#include "settingsdialog.h"
#include "postgenerator.h"
#include "processmanager.h"
#include "styleselectordialog.h"
#include "torrentselectordialog.h"
#include "trackselectordialog.h"
#include <QThread>
#include <QDateTime>
#include <QDir>
#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <QMessageBox>
#include <QSettings>
#include <QFileDialog>
#include <QRegularExpression>
#include <QCloseEvent>
#include <QIcon>


static QString logCategoryToString(LogCategory category)
{
    switch (category) {
    case LogCategory::APP: return "APP";
    case LogCategory::FFMPEG: return "FFMPEG";
    case LogCategory::MKVTOOLNIX: return "MKVTOOLNIX";
    case LogCategory::QBITTORRENT: return "QBITTORRENT";
    case LogCategory::DEBUG: return "DEBUG";
    }
    return "UNKNOWN";
}

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , m_currentWorker(nullptr)
{
    ui->setupUi(this);
    setWindowIcon(QIcon(":/icon.png"));

    m_manualAssemblyWidget = new ManualAssemblyWidget(this);
    ui->manualTabLayout->addWidget(m_manualAssemblyWidget);
    m_manualRenderWidget = new ManualRenderWidget(this);
    ui->renderTabLayout->addWidget(m_manualRenderWidget);
    m_publicationWidget = new PublicationWidget(this);
    ui->mainTabWidget->addTab(m_publicationWidget, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è");
    ui->mainTabWidget->setTabEnabled(ui->mainTabWidget->count() - 1, false);

    QAction *settingsAction = new QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", this);
    ui->menubar->addAction(settingsAction);
    connect(settingsAction, &QAction::triggered, this, &MainWindow::on_actionSettings_triggered);
    connect(m_manualAssemblyWidget, &ManualAssemblyWidget::templateDataRequested, this, &MainWindow::onRequestTemplateData);

    connect(m_manualAssemblyWidget, &ManualAssemblyWidget::assemblyRequested, this, &MainWindow::startManualAssembly);
    connect(m_manualRenderWidget, &ManualRenderWidget::renderRequested, this, &MainWindow::startManualRender);

    connect(m_publicationWidget, &PublicationWidget::logMessage, this, &MainWindow::logMessage);
    connect(m_publicationWidget, &PublicationWidget::postsUpdateRequest, this, &MainWindow::onPostsUpdateRequest);

    ui->downloadProgressBar->setVisible(false);
    ui->progressLabel->setVisible(false);

    loadTemplates();

    if(ui->templateComboBox->count() == 0) {
        logMessage("–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω.");
    } else {
        logMessage(QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 —à–∞–±–ª–æ–Ω–æ–≤.").arg(m_templates.count()));
    }
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::logMessage(const QString &message, LogCategory category)
{
    const auto& enabledCategories = AppSettings::instance().enabledLogCategories();
    if (!enabledCategories.contains(category)) {
        return;
    }

    QString categoryName = logCategoryToString(category);
    QString timedMessage = QString("[%1] %2 - %3")
                               .arg(categoryName)
                               .arg(QDateTime::currentDateTime().toString("hh:mm:ss"))
                               .arg(message.trimmed());
    ui->logOutput->appendPlainText(timedMessage);
}

void MainWindow::loadTemplates()
{
    m_templates.clear();
    ui->templateComboBox->clear();

    QDir templatesDir("templates");
    if (!templatesDir.exists()) {
        templatesDir.mkpath(".");
        logMessage("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'templates' –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤.", LogCategory::APP);
    }

    QStringList filter("*.json");
    QFileInfoList fileList = templatesDir.entryInfoList(filter, QDir::Files);

    for (const QFileInfo &fileInfo : fileList) {
        QFile file(fileInfo.absoluteFilePath());
        if (!file.open(QIODevice::ReadOnly)) {
            logMessage("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ " + fileInfo.fileName(), LogCategory::APP);
            continue;
        }

        QJsonDocument doc = QJsonDocument::fromJson(file.readAll());
        file.close();

        ReleaseTemplate t;
        t.read(doc.object());

        if (!t.templateName.isEmpty()) {
            m_templates.insert(t.templateName, t);
        }
    }

    ui->templateComboBox->addItems(m_templates.keys());

    if (m_manualAssemblyWidget) {
        m_manualAssemblyWidget->updateTemplateList(m_templates.keys());
    }
}

void MainWindow::saveTemplate(const ReleaseTemplate &t)
{
    if (t.templateName.isEmpty()) {
        logMessage("–û—à–∏–±–∫–∞: –∏–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", LogCategory::APP);
        return;
    }

    QString nameToSelect = t.templateName;

    if (!m_editingTemplateFileName.isEmpty() && m_editingTemplateFileName != t.templateName) {
        QFile::remove("templates/" + m_editingTemplateFileName + ".json");
    }

    QDir templatesDir("templates");
    QFile file(templatesDir.filePath(t.templateName + ".json"));
    if (!file.open(QIODevice::WriteOnly)) {
        logMessage("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ " + t.templateName, LogCategory::APP);
        return;
    }

    QJsonObject jsonObj;
    t.write(jsonObj);

    file.write(QJsonDocument(jsonObj).toJson(QJsonDocument::Indented));
    file.close();

    logMessage("–®–∞–±–ª–æ–Ω '" + t.templateName + "' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", LogCategory::APP);
    loadTemplates();

    int index = ui->templateComboBox->findText(nameToSelect);
    if (index != -1) { // -1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        ui->templateComboBox->setCurrentIndex(index);
    }
}

void MainWindow::on_createTemplateButton_clicked()
{
    m_editingTemplateFileName.clear();
    TemplateEditor editor(this);

    ReleaseTemplate defaultTemplate;
    defaultTemplate.templateName = "–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω";
    defaultTemplate.seriesTitle = "–ö–∞–∫ –≤ –∞—Ä—Ö–∏–≤–µ mkv";
    defaultTemplate.seriesTitleForPost = "–ö–∞–∫ –≤ –ø–æ—Å—Ç–∞—Ö";
    defaultTemplate.rssUrl = QUrl("https://example.com/rss.xml");
    defaultTemplate.animationStudio = "STUDIO";
    defaultTemplate.subAuthor = "Crunchyroll";
    defaultTemplate.originalLanguage = "jpn";
    defaultTemplate.endingChapterName = "Ending Start";
    defaultTemplate.totalEpisodes = 12;

    defaultTemplate.director = "–†–µ–∂–∏—Å—Å–µ—Ä –î—É–±–ª—è–∂–∞";
    defaultTemplate.soundEngineer = "–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä";
    defaultTemplate.timingAuthor = "–¢–∞–π–º–∏–Ω–≥–µ—Ä";
    defaultTemplate.releaseBuilder = "–°–±–æ—Ä—â–∏–∫ –†–µ–ª–∏–∑–∞";
    defaultTemplate.cast << "–ê–∫—Ç–µ—Ä 1" << "–ê–∫—Ç–µ—Ä 2" << "–ê–∫—Ç–µ—Ä 3";

    defaultTemplate.postTemplates["tg_mp4"] =
        "‚ñ∂Ô∏è–°–µ—Ä–∏—è: %EPISODE_NUMBER%/%TOTAL_EPISODES%\n\n"
        "üìå¬´%SERIES_TITLE%¬ª –≤ –¥—É–±–ª—è–∂–µ –æ—Ç –¢–û –î—É–±–ª—è–∂–Ω–∞—è\n\n"
        "üéÅ–ê —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –∫–æ–ø–µ–µ—á–∫–æ–π (https://boosty.to/dubl/single-payment/donation/696237/target?share=target_link)\nüíô–í–ö(https://vk.com/dublyajnaya?from=groups&ref=group_widget&w=app6471849_-216649949)\nüí∞BOOSTY(https://boosty.to/dubl/single-payment/donation/696237/target?share=target_link)\n\n"
        "Anime365 (%LINK_ANIME365%)\n\n"
        "AnimeLib (%LINK_ANILIB%)\n\n"
        "–ê—Ä—Ö–∏–≤ MKV (https://t.me/+CVpSSg33UwI4MzYy)\n\n"
        "üéô–†–æ–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏:\n%CAST_LIST%\n\n"
        "üìù–†–µ–∂–∏—Å—Å—ë—Ä –¥—É–±–ª—è–∂–∞:\n%DIRECTOR%\n\n"
        "ü™Ñ–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä:\n%SOUND_ENGINEER%\n\n"
        "üìö–ü–µ—Ä–µ–≤–æ–¥:\n%SUB_AUTHOR%\n\n"
        "‚úèÔ∏è–†–∞–∑–º–µ—Ç–∫–∞:\n%TIMING_AUTHOR%\n\n"
        "‚ú®–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–µ—Ä–∞:\n–ö–∏—Ä–∏–ª–ª –•–æ—Ä–∏–º–∏–µ–≤\n\n"
        "üì¶–°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–∞:\n%RELEASE_BUILDER%\n\n"
        "#–î—É–±—Ä–µ–ª–∏–∑@dublyajnaya #–•–µ—à—Ç–µ–≥@dublyajnaya #–î—É–±–ª—è–∂@dublyajnaya";
    defaultTemplate.postTemplates["tg_mkv"] =
        "%SERIES_TITLE%\n"
        "–°–µ—Ä–∏—è %EPISODE_NUMBER%/%TOTAL_EPISODES%\n"
        "#–•–µ—à—Ç–µ–≥";
    defaultTemplate.postTemplates["vk"] =
        "%SERIES_TITLE% –≤ –¥—É–±–ª—è–∂–µ –æ—Ç –¢–û –î—É–±–ª—è–∂–Ω–∞—è\n\n"
        "–°–µ—Ä–∏—è: %EPISODE_NUMBER%/%TOTAL_EPISODES%\n\n"
        "–†–æ–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏:\n%CAST_LIST%\n\n"
        "–†–µ–∂–∏—Å—Å—ë—Ä –¥—É–±–ª—è–∂–∞:\n%DIRECTOR%\n\n"
        "–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä:\n%SOUND_ENGINEER%\n\n"
        "–ü–µ—Ä–µ–≤–æ–¥:\n%SUB_AUTHOR%\n\n"
        "Ô∏è–†–∞–∑–º–µ—Ç–∫–∞:\n%TIMING_AUTHOR%\n\n"
        "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–µ—Ä–∞:\n–ö–∏—Ä–∏–ª–ª –•–æ—Ä–∏–º–∏–µ–≤\n\n"
        "–°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–∞:\n%RELEASE_BUILDER%\n\n"
        "#–•–µ—à—Ç–µ–≥";
    defaultTemplate.postTemplates["vk_comment"] =
        "–ê —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –Ω–∞ –±—É—Å—Ç–∏: https://boosty.to/dubl/single-payment/donation/634652\n\n"
        "–¢–ì: https://t.me/dublyajnaya\n\n"
        "Anime365: %LINK_ANIME365%\n"
        "AnimeLib: %LINK_ANILIB%\n";
    defaultTemplate.uploadUrls << "https://vk.com/dublyajnaya" << "https://converter.kodik.biz/media-files" << "https://anime-365.ru/" << "https://anilib.me/ru";
    editor.setTemplate(defaultTemplate);

    if (editor.exec() == QDialog::Accepted) {
        ReleaseTemplate newTemplate = editor.getTemplate();
        if (newTemplate.templateName.isEmpty()) {
            QMessageBox::warning(&editor, "–û—à–∏–±–∫–∞", "–ò–º—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }
        saveTemplate(newTemplate);
    }
}

void MainWindow::on_editTemplateButton_clicked()
{
    QString currentName = ui->templateComboBox->currentText();
    if (currentName.isEmpty() || !m_templates.contains(currentName)) {
        logMessage("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", LogCategory::APP);
        return;
    }

    m_editingTemplateFileName = currentName;

    TemplateEditor editor(this);
    editor.setTemplate(m_templates.value(currentName));
    if (editor.exec() == QDialog::Accepted) {
        ReleaseTemplate updatedTemplate = editor.getTemplate();
        saveTemplate(updatedTemplate);
    }
}

void MainWindow::on_deleteTemplateButton_clicked()
{
    QString currentName = ui->templateComboBox->currentText();
    if (currentName.isEmpty()) {
        logMessage("–û—à–∏–±–∫–∞: –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", LogCategory::APP);
        return;
    }

    auto reply = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                       "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '" + currentName + "'?",
                                       QMessageBox::Yes | QMessageBox::No);

    if (reply == QMessageBox::Yes) {
        QFile::remove("templates/" + currentName + ".json");
        logMessage("–®–∞–±–ª–æ–Ω '" + currentName + "' —É–¥–∞–ª–µ–Ω.", LogCategory::APP);
        loadTemplates();
    }
}

void MainWindow::on_cancelButton_clicked()
{
    if (m_currentWorker) {
        logMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É...", LogCategory::APP);
        QMetaObject::invokeMethod(m_currentWorker, "cancelOperation", Qt::QueuedConnection);
    }
}

void MainWindow::on_startButton_clicked()
{
    if (m_currentWorker) {
        logMessage("–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", LogCategory::APP);
        return;
    }

    m_publicationWidget->clearData();
    int pubIndex = ui->mainTabWidget->indexOf(m_publicationWidget);
    if (pubIndex != -1) {
        ui->mainTabWidget->setTabEnabled(pubIndex, false);
    }

    QString manualMkvPath = ui->mkvPathLineEdit->text();
    if (manualMkvPath.isEmpty() && ui->episodeNumberLineEdit->text().isEmpty()) {
        logMessage("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ MKV-—Ñ–∞–π–ª.", LogCategory::APP);
        return;
    }
    QString currentName = ui->templateComboBox->currentText();
    if (currentName.isEmpty()) {
        logMessage("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω.", LogCategory::APP);
        return;
    }

    switchToCancelMode();
    setUiEnabled(false);

    ReleaseTemplate currentTemplate = m_templates.value(currentName);
    QString episodeNumberStr = ui->episodeNumberLineEdit->text();
    bool ok;
    int epNum = episodeNumberStr.toInt(&ok);
    if (!ok && manualMkvPath.isEmpty()) {
        logMessage("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.", LogCategory::APP);
        return;
    } else if (ok) {
        episodeNumberStr = QString::number(epNum);
    }
    QString episodeForPost = episodeNumberStr;
    QString episodeForSearch = QString("%1").arg(epNum, 2, 10, QChar('0'));

    QSettings settings("MyCompany", "DubbingTool");

    setUiEnabled(false);

    QThread* thread = new QThread(this);
    WorkflowManager* workflowManager = new WorkflowManager(currentTemplate, episodeForPost, episodeForSearch, settings, this);

    m_currentWorker = workflowManager; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    m_activeProcessManagers.append(workflowManager->getProcessManager());
    connect(workflowManager, &WorkflowManager::multipleTorrentsFound, this, &MainWindow::onMultipleTorrentsFound, Qt::QueuedConnection);
    connect(this, &MainWindow::torrentSelected, workflowManager, &WorkflowManager::resumeWithSelectedTorrent);
    connect(workflowManager, &WorkflowManager::multipleAudioTracksFound, this, &MainWindow::onMultipleAudioTracksFound, Qt::QueuedConnection);
    connect(this, &MainWindow::audioTrackSelected, workflowManager, &WorkflowManager::resumeWithSelectedAudioTrack);
    connect(workflowManager, &WorkflowManager::missingFilesRequest, this, &MainWindow::onMissingFilesRequest, Qt::QueuedConnection);
    connect(this, &MainWindow::missingFilesProvided, workflowManager, &WorkflowManager::resumeWithMissingFiles);
    connect(workflowManager, &WorkflowManager::signStylesRequest, this, &MainWindow::onSignStylesRequest, Qt::QueuedConnection);
    connect(this, &MainWindow::signStylesProvided, workflowManager, &WorkflowManager::resumeWithSignStyles);
    connect(workflowManager, &WorkflowManager::bitrateCheckRequest, this, &MainWindow::onBitrateCheckRequest, Qt::QueuedConnection);

    connect(workflowManager, &WorkflowManager::pauseForSubEditRequest, this, &MainWindow::onPauseForSubEditRequest, Qt::QueuedConnection);
    connect(this, &MainWindow::subEditFinished, workflowManager, &WorkflowManager::resumeAfterSubEdit);

    workflowManager->moveToThread(thread);

    if (!manualMkvPath.isEmpty()) {
        connect(thread, &QThread::started, workflowManager, [workflowManager, manualMkvPath](){
            workflowManager->startWithManualFile(manualMkvPath);
        });
    } else {
        connect(thread, &QThread::started, workflowManager, &WorkflowManager::start);
    }
    connect(workflowManager, &WorkflowManager::finished, this, &MainWindow::finishWorkerProcess);
    connect(workflowManager, &WorkflowManager::workflowAborted, this, &MainWindow::finishWorkerProcess);

    connect(workflowManager, &WorkflowManager::postsReady, this, &MainWindow::onPostsReady);
    connect(workflowManager, &WorkflowManager::filesReady, this, &MainWindow::onFilesReady);
    connect(workflowManager, &WorkflowManager::filesReady, thread, &QThread::quit);
    connect(thread, &QThread::finished, workflowManager, &WorkflowManager::deleteLater);
    connect(workflowManager, &WorkflowManager::destroyed, thread, &QThread::deleteLater);
    connect(workflowManager, &WorkflowManager::logMessage, this, &MainWindow::logMessage);
    connect(workflowManager, &WorkflowManager::progressUpdated, this, &MainWindow::updateProgress);

    thread->start();
}

void MainWindow::on_selectMkvButton_clicked()
{
    QString filePath = QFileDialog::getOpenFileName(this, "–í—ã–±–µ—Ä–∏—Ç–µ MKV —Ñ–∞–π–ª", "", "MKV —Ñ–∞–π–ª—ã (*.mkv)");
    if (filePath.isEmpty()) {
        return;
    }
    ui->mkvPathLineEdit->setText(filePath);

    if (ui->episodeNumberLineEdit->text().isEmpty()) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞, –æ–∫—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∏—Ä–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        QRegularExpression re(" - (\\d{1,3})[ ._]");
        QRegularExpressionMatch match = re.match(filePath);

        if (!match.hasMatch()) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ –∏–º–µ–Ω–∏
            re.setPattern("(\\d+)(?!.*\\d)");
            match = re.match(QFileInfo(filePath).baseName());
        }

        if (match.hasMatch()) {
            QString episodeNumber = match.captured(1);
            ui->episodeNumberLineEdit->setText(episodeNumber);
            logMessage("–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: " + episodeNumber, LogCategory::APP);
        } else {
            logMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.", LogCategory::APP);
        }
    }
}

void MainWindow::onMultipleTorrentsFound(const QList<TorrentInfo> &candidates)
{
    TorrentSelectorDialog dialog(candidates, this);
    if (dialog.exec() == QDialog::Accepted) {
        int selectedIndex = dialog.getSelectedIndex();
        if (selectedIndex >= 0 && selectedIndex < candidates.size()) {
            emit torrentSelected(candidates[selectedIndex]);
        }
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
        logMessage("–í—ã–±–æ—Ä —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.", LogCategory::APP);
        // –ù–∞–º –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Å–∫–∞–∑–∞—Ç—å –≤–æ—Ä–∫–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        emit torrentSelected({}); // –ü—É—Å—Ç–æ–π TorrentInfo –±—É–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–º –∫ –æ—Ç–º–µ–Ω–µ
    }
}

void MainWindow::onWorkflowAborted()
{
    logMessage("============ –ü–†–û–¶–ï–°–° –ü–†–ï–†–í–ê–ù –° –û–®–ò–ë–ö–û–ô ============", LogCategory::APP);
}

void MainWindow::on_actionSettings_triggered()
{
    SettingsDialog dialog(this);
    if (dialog.exec() == QDialog::Accepted) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û–ö", –∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –¥–∏—Å–∫.
        // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

        // 1. –ó–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å.
        emit logMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", LogCategory::APP);
        AppSettings::instance().load();

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        // –°–µ–π—á–∞—Å —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–Ω–¥–µ—Ä–µ.
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥–∂–µ—Ç—ã.
        m_manualRenderWidget->updateRenderPresets();

        // –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —à–∞–±–ª–æ–Ω–æ–≤,
        // –Ω–æ –æ–Ω –∏ —Ç–∞–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏, —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
        emit logMessage("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.", LogCategory::APP);
    }
}

void MainWindow::updateProgress(int percentage, const QString &stageName)
{
    if (!ui->downloadProgressBar->isVisible()) {
        ui->downloadProgressBar->setVisible(true);
        ui->progressLabel->setVisible(true);
    }

    if (!stageName.isEmpty()) {
        ui->progressLabel->setText(QString("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: %1").arg(stageName));
    }

    if (percentage < 0) {
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è "–±–µ–≥–∞—é—â–µ–≥–æ" –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        ui->downloadProgressBar->setMinimum(0);
        ui->downloadProgressBar->setMaximum(0);
        ui->downloadProgressBar->setValue(-1);
    } else {
        ui->downloadProgressBar->setMinimum(0);
        ui->downloadProgressBar->setMaximum(100);
        ui->downloadProgressBar->setValue(percentage);
    }
}

void MainWindow::on_selectAudioButton_clicked()
{
    QString filePath = QFileDialog::getOpenFileName(this, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", "", "–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (*.wav *.flac *.aac)");
    if (!filePath.isEmpty()) {
        ui->audioPathLineEdit->setText(filePath);
    }
}

QString MainWindow::getAudioPath() const
{
    return ui->audioPathLineEdit->text();
}

QString MainWindow::getManualMkvPath() const
{
    return ui->mkvPathLineEdit->text();
}

void MainWindow::onRequestTemplateData(const QString &templateName)
{
    if (m_templates.contains(templateName)) {
        m_manualAssemblyWidget->onTemplateDataReceived(m_templates.value(templateName));
    }
}

void MainWindow::startManualAssembly()
{
    if (m_currentWorker) {
        logMessage("–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", LogCategory::APP);
        return;
    }
    logMessage("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é —Å–±–æ—Ä–∫—É...", LogCategory::APP);

    switchToCancelMode();
    setUiEnabled(false);
    ui->mainTabWidget->setCurrentIndex(0); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —Ç–∞–±

    QThread* thread = new QThread(this);
    ManualAssembler* worker = new ManualAssembler(m_manualAssemblyWidget->getParameters(), nullptr);

    m_currentWorker = worker;
    m_activeProcessManagers.append(worker->getProcessManager());
    worker->moveToThread(thread);

    connect(thread, &QThread::started, worker, &ManualAssembler::start);
    connect(worker, &ManualAssembler::finished, this, &MainWindow::finishWorkerProcess);
    connect(worker, &ManualAssembler::logMessage, this, &MainWindow::logMessage);
    connect(worker, &ManualAssembler::progressUpdated, this, &MainWindow::updateProgress);
    connect(thread, &QThread::finished, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, thread, &QObject::deleteLater);

    thread->start();
}

void MainWindow::startManualRender()
{
    if (m_currentWorker) {
        logMessage("–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", LogCategory::APP);
        return;
    }
    logMessage("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä...", LogCategory::APP);

    switchToCancelMode();
    setUiEnabled(false);
    ui->mainTabWidget->setCurrentIndex(0);

    QThread* thread = new QThread(this);
    ManualRenderer* worker = new ManualRenderer(m_manualRenderWidget->getParameters(), nullptr);

    m_currentWorker = worker;
    m_activeProcessManagers.append(worker->getProcessManager());
    worker->moveToThread(thread);

    connect(thread, &QThread::started, worker, &ManualRenderer::start);
    connect(worker, &ManualRenderer::finished, this, &MainWindow::finishWorkerProcess);
    connect(worker, &ManualRenderer::logMessage, this, &MainWindow::logMessage);
    connect(worker, &ManualRenderer::progressUpdated, this, [this](int p){ updateProgress(p); });
    connect(thread, &QThread::finished, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, thread, &QObject::deleteLater);
    connect(worker, &ManualRenderer::bitrateCheckRequest, this, &MainWindow::onBitrateCheckRequest, Qt::QueuedConnection);

    thread->start();
}

void MainWindow::onPostsReady(const ReleaseTemplate &t, const EpisodeData &data)
{
    logMessage("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã, –æ—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å '–ü—É–±–ª–∏–∫–∞—Ü–∏—è'.", LogCategory::APP);

    m_lastTemplate = t;
    m_lastEpisodeData = data;
    m_lastMkvPath = "";
    m_lastMp4Path = "";

    PostGenerator generator;
    QMap<QString, PostVersions> postTexts = generator.generate(m_lastTemplate, m_lastEpisodeData);

    m_publicationWidget->updateData(m_lastTemplate, m_lastEpisodeData, postTexts, m_lastMkvPath, m_lastMp4Path);

    int pubIndex = ui->mainTabWidget->indexOf(m_publicationWidget);
    if (pubIndex != -1) {
        ui->mainTabWidget->setTabEnabled(pubIndex, true);
    }
}


void MainWindow::onFilesReady(const QString &mkvPath, const QString &mp4Path)
{
    logMessage("–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã, –æ–±–Ω–æ–≤–ª—è—é –ø–∞–Ω–µ–ª—å '–ü—É–±–ª–∏–∫–∞—Ü–∏—è'.", LogCategory::APP);
    m_lastMkvPath = mkvPath;
    m_lastMp4Path = mp4Path;

    m_publicationWidget->setFilePaths(mkvPath, mp4Path);
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    AppSettings::instance().save();
    if (m_currentWorker) {
        logMessage("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...", LogCategory::APP);
        QMetaObject::invokeMethod(m_currentWorker, "cancelOperation", Qt::QueuedConnection);

        if (m_currentWorker && m_currentWorker->thread()) {
            if (!m_currentWorker->thread()->wait(5000)) {
                logMessage("–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —à—Ç–∞—Ç–Ω–æ, –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.", LogCategory::APP);
                m_currentWorker->thread()->terminate();
            }
        }

        logMessage("–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", LogCategory::APP);
    }
    event->accept();
}

void MainWindow::on_browseOverrideSubsButton_clicked()
{
    QString filePath = QFileDialog::getOpenFileName(this, "–í—ã–±–µ—Ä–∏—Ç–µ ASS —Ñ–∞–π–ª", "", "ASS Subtitles (*.ass)");
    if (!filePath.isEmpty()) {
        ui->overrideSubsPathEdit->setText(filePath);
    }
}

void MainWindow::on_browseOverrideSignsButton_clicked()
{
    QString filePath = QFileDialog::getOpenFileName(this, "–í—ã–±–µ—Ä–∏—Ç–µ ASS —Ñ–∞–π–ª", "", "ASS Subtitles (*.ass)");
    if (!filePath.isEmpty()) {
        ui->overrideSignsPathEdit->setText(filePath);
    }
}

QString MainWindow::getOverrideSubsPath() const
{
    return ui->overrideSubsPathEdit->text();
}

QString MainWindow::getOverrideSignsPath() const
{
    return ui->overrideSignsPathEdit->text();
}

void MainWindow::onPostsUpdateRequest(const QMap<QString, QString> &viewLinks)
{
    logMessage("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏...", LogCategory::APP);
    m_lastEpisodeData.viewLinks = viewLinks;

    PostGenerator generator;
    QMap<QString, PostVersions> postTexts = generator.generate(m_lastTemplate, m_lastEpisodeData);
    m_publicationWidget->updateData(m_lastTemplate, m_lastEpisodeData, postTexts, m_lastMkvPath, m_lastMp4Path);

    QMessageBox::information(m_publicationWidget, "–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
}

void MainWindow::onMissingFilesRequest(const QStringList &missingFonts, bool requireWav, bool requireTime)
{
    logMessage("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", LogCategory::APP);
    MissingFilesDialog dialog(this);

    bool audioNeeded = ui->audioPathLineEdit->text().isEmpty();
    if (requireWav) {
        audioNeeded = true;
        dialog.setAudioPrompt("–î–ª—è SRT-–º–∞—Å—Ç–µ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∂–∞—Ç—ã–π WAV-—Ñ–∞–π–ª:");
    } else {
        dialog.setAudioPrompt("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫—É—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–µ–π:");
    }

    dialog.setAudioPathVisible(audioNeeded);
    dialog.setMissingFonts(missingFonts);
    dialog.setTimeInputVisible(requireTime);

    if (requireTime && !requireWav && missingFonts.isEmpty()) {
        dialog.setTimePrompt("–í—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¢–ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–Ω–¥–∏–Ω–≥–∞:");
    }

    if (dialog.exec() == QDialog::Accepted) {
        QString audioPath = dialog.getAudioPath();
        QString time = dialog.getTime();
        ui->audioPathLineEdit->setText(audioPath);
        if (audioNeeded && audioPath.isEmpty()) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π. –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
            emit missingFilesProvided("", {}, "");
            return;
        }
        if (requireTime && time.isEmpty()) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–í—Ä–µ–º—è —ç–Ω–¥–∏–Ω–≥–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
            emit missingFilesProvided("", {}, "");
            return;
        }

        logMessage("–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã, –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...", LogCategory::APP);
        emit missingFilesProvided(audioPath, dialog.getResolvedFonts(), time);

    } else {
        logMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.", LogCategory::APP);
        emit missingFilesProvided("", {}, "");
    }
}

void MainWindow::onSignStylesRequest(const QString &subFilePath)
{
    logMessage("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–¥–ø–∏—Å–µ–π.", LogCategory::APP);
    StyleSelectorDialog dialog(this);
    dialog.analyzeFile(subFilePath);

    if (dialog.exec() == QDialog::Accepted) {
        QStringList selected = dialog.getSelectedStyles();
        logMessage("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–¥–ø–∏—Å–µ–π: " + selected.join(", "), LogCategory::APP);
        emit signStylesProvided(selected);
    } else {
        logMessage("–í—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.", LogCategory::APP);
        emit signStylesProvided({}); // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    }
}

void MainWindow::onMultipleAudioTracksFound(const QList<AudioTrackInfo> &candidates)
{
    TrackSelectorDialog dialog(candidates, this);
    if (dialog.exec() == QDialog::Accepted) {
        emit audioTrackSelected(dialog.getSelectedTrackId());
    } else {
        logMessage("–í—ã–±–æ—Ä –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.", LogCategory::APP);
        emit audioTrackSelected(-1); // -1 –±—É–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–º –∫ –æ—Ç–º–µ–Ω–µ
    }
}

void MainWindow::setUiEnabled(bool enabled)
{
    ui->createTemplateButton->setEnabled(enabled);
    ui->editTemplateButton->setEnabled(enabled);
    ui->deleteTemplateButton->setEnabled(enabled);

    if (m_manualAssemblyWidget) m_manualAssemblyWidget->findChild<QPushButton*>("assembleButton")->setEnabled(enabled);
    if (m_manualRenderWidget) m_manualRenderWidget->findChild<QPushButton*>("renderButton")->setEnabled(enabled);
}

void MainWindow::finishWorkerProcess()
{
    logMessage("============ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù ============", LogCategory::APP);

    if (m_currentWorker) {
        if(auto ptr = qobject_cast<WorkflowManager*>(m_currentWorker.data())) m_activeProcessManagers.removeOne(ptr->getProcessManager());
        else if(auto ptr = qobject_cast<ManualAssembler*>(m_currentWorker.data())) m_activeProcessManagers.removeOne(ptr->getProcessManager());
        else if(auto ptr = qobject_cast<ManualRenderer*>(m_currentWorker.data())) m_activeProcessManagers.removeOne(ptr->getProcessManager());

        if(m_currentWorker->thread()) m_currentWorker->thread()->quit();
        m_currentWorker = nullptr;
    }

    restoreUiAfterFinish();
}

void MainWindow::switchToCancelMode()
{
    ui->startButton->setText("–û–¢–ú–ï–ù–ê");
    ui->startButton->setStyleSheet("background-color: #d9534f; color: white;");
    disconnect(ui->startButton, &QPushButton::clicked, this, &MainWindow::on_startButton_clicked);
    connect(ui->startButton, &QPushButton::clicked, this, &MainWindow::on_cancelButton_clicked);
}

void MainWindow::restoreUiAfterFinish()
{
    ui->startButton->setText("–°–¢–ê–†–¢");
    ui->startButton->setStyleSheet("");
    disconnect(ui->startButton, &QPushButton::clicked, this, &MainWindow::on_cancelButton_clicked);
    connect(ui->startButton, &QPushButton::clicked, this, &MainWindow::on_startButton_clicked);

    setUiEnabled(true);

    ui->downloadProgressBar->setVisible(false);
    ui->progressLabel->setVisible(false);
}

void MainWindow::onBitrateCheckRequest(const RenderPreset &preset, double actualBitrate)
{
    RerenderDialog dialog(preset, actualBitrate, this);
    bool accepted = (dialog.exec() == QDialog::Accepted);

    // –û—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫, –≥–¥–µ –∂–∏–≤–µ—Ç –≤–æ—Ä–∫–µ—Ä
    if (m_currentWorker) {
        QString pass1 = accepted ? dialog.getCommandPass1() : "";
        QString pass2 = accepted ? dialog.getCommandPass2() : "";

        // –ù–∞—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–π RenderHelper –∏ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–ª–æ—Ç
        RenderHelper* helper = m_currentWorker->findChild<RenderHelper*>();
        if(helper) {
            QMetaObject::invokeMethod(helper, "onDialogFinished", Qt::QueuedConnection,
                                      Q_ARG(bool, accepted),
                                      Q_ARG(QString, pass1),
                                      Q_ARG(QString, pass2));
        }
    }
}

void MainWindow::onPauseForSubEditRequest(const QString &subFilePath)
{
    logMessage("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤.", LogCategory::APP);
    QMessageBox msgBox(this);
    msgBox.setIcon(QMessageBox::Information);
    msgBox.setText("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    msgBox.setInformativeText(QString("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤:\n%1\n\n–ù–∞–∂–º–∏—Ç–µ 'OK' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏.").arg(QDir::toNativeSeparators(subFilePath)));
    msgBox.setStandardButtons(QMessageBox::Ok);
    msgBox.exec();

    emit subEditFinished();
}
