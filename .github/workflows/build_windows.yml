# Имя рабочего процесса
name: Windows CI Build

# Триггер для запуска: каждый push в ветку 'main' (или 'master')
on:
  push:
    branches:
      - 'main' # Замените на 'master', если у вас так называется основная ветка

# Задачи, которые будут выполняться
jobs:
  build:
    # Запускаем на последней версии Windows
    runs-on: windows-latest

    # Шаги выполнения
    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.7.2' # <-- ЗАМЕНИТЕ НА '6.9.0', КОГДА СТАНЕТ ДОСТУПНА
          arch: 'win64_msvc2019_64'
          cached: 'true'
          
      # 3. Собираем проект с помощью qmake и jom
      - name: Build with qmake and jom
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          qmake DubbingTool.pro -spec win32-msvc "CONFIG+=release"
          jom.exe -j$(nproc)
          
      # 4. Собираем все необходимые DLL с помощью windeployqt
      - name: Deploy Qt dependencies
        run: |
          windeployqt.exe --release --no-translations --no-opengl-sw --no-svg --no-network --no-xml release/DubbingTool.exe
          
      # 5. Создаем папку для артефакта и перемещаем туда сборку
      # Это делает структуру архива чище (без папки 'release' внутри)
      - name: Prepare artifact
        shell: bash
        run: |
          mkdir artifact
          mv release/* artifact/

      # 6. Загружаем собранное приложение как артефакт
      # Артефакт будет доступен для скачивания на странице этого запуска Actions
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DubbingTool-Windows-x64 # Имя артефакта
          path: artifact # Путь к папке с файлами для загрузки
          retention-days: 7 # Сколько дней хранить артефакт (по умолчанию 90)