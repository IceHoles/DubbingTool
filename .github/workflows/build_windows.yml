# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: Windows Release Build

# Триггер для запуска: создание нового тега, начинающегося с 'v'
on:
  push:
    tags:
      - 'v*'

# Задачи, которые будут выполняться
jobs:
  build:
    # Запускаем на последней версии Windows
    runs-on: windows-latest

    # Шаги выполнения
    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Qt.
      # Важно: на данный момент (июнь 2024) install-qt-action не поддерживает 6.9.0.
      # Используем последнюю доступную стабильную версию. Замените на 6.9.0, как только она появится.
      # Проверить доступные версии можно здесь: https://install-qt-action.is-a.dev/
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.7.2' # <-- ЗАМЕНИТЕ НА '6.9.0', КОГДА СТАНЕТ ДОСТУПНА
          arch: 'win64_msvc2019_64'
          cached: 'true' # Использовать кэш для ускорения последующих сборок
          
      # 3. Собираем проект с помощью qmake и jom (аналог nmake для параллельной сборки)
      - name: Build with qmake and jom
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          qmake DubbingTool.pro -spec win32-msvc "CONFIG+=release"
          jom.exe -j$(nproc)
          
      # 4. Собираем все необходимые DLL с помощью windeployqt
      - name: Deploy Qt dependencies
        run: |
          windeployqt.exe --release --no-translations --no-opengl-sw --no-svg --no-network --no-xml release/DubbingTool.exe
          
      # 5. Создаем архив с готовым приложением
      - name: Archive release
        uses: thefactory/zip-release@v1
        with:
          filename: DubbingTool-Windows-x64.zip
          path: release
          # Включаем только необходимые файлы
          include: |
            DubbingTool.exe
            *.dll
            platforms/*.dll
            styles/*.dll
            resources.rcc

      # 6. Создаем релиз на GitHub и прикрепляем к нему архив
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # Используем имя тега (например, v1.0.0)
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DubbingTool-Windows-x64.zip
          asset_name: DubbingTool-Windows-x64.zip
          asset_content_type: application/zip